generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PROFESSIONAL
  BUSINESS
}

enum Secteur {
  TECHNOLOGIE
  AGRO_HALIEUTIQUE
  COMMERCE
  FINANCE
  SANTE
  ÉNERGIE_DURABILITE
  TRANSPORT
  INDUSTRIE
  COMMERCE_DISTRIBUTION
  SERVICES_PROFESSIONNELS
  TOURISME
  MEDIA_DIVERTISSEMENT
  EDUCATION
  AUTRE
}

enum ProfessionalInterest {
  MENTORAT
  RESEAUTAGE
  EMPLOI
  FORMATION
  AUTRE
}

enum CompanyNeed {
  PRESENTATION_MARQUE
  RESEAU_B2B
  TALENTS_QUALIFIES
  PARTENARIATS_B2B
  FREELANCES_PRESTATAIRES
  VISIBILITE_MARKETING_DIGITAL
  INVESTISSEMENTS
  MENTORAT
  FORUMS_SECTORIELS
  AUTRE
}

enum CompanySize {
  LESS_THAN_10
  BETWEEN_10_50
  BETWEEN_50_250
  MORE_THAN_250
}

enum TypeContrat {
  CDI
  CDD
  FREELANCE
  AUTRE
}

model User {
  id                   String    @id @default(uuid())
  Prénom               String
  Nom                  String
  Email                String    @unique
  Téléphone_mobile     String    @unique
  role                 UserRole
  address              String?
  sector               Secteur
  createdAt            DateTime  @default(now())
  emailVerified        Boolean?  @db.Boolean

  // Champs du formulaire court
  besoinPrincipal      ProfessionalInterest
  typeContrat          TypeContrat? // si besoinPrincipal = EMPLOI

  // Relations
  professionalDetails  ProfessionalDetail?
  companyDetails       CompanyDetail?

  // Autres champs
  subscribedToNewsletter Boolean @default(false)
  registeredForTrial     Boolean @default(false)
  registrationDate       DateTime?
  
  // For tracking
  referralSource         String?
  ipAddress              String?
  utmSource              String?
  utmMedium              String?
  utmCampaign            String?
}

model ProfessionalDetail {
  id                     String   @id @default(uuid())
  user                   User     @relation(fields: [userId], references: [id])
  userId                 String   @unique
  professionalInterests  ProfessionalInterest[]
  professionalChallenges String?
  address                String?
}

model CompanyDetail {
  id                String      @id @default(uuid())
  user              User        @relation(fields: [userId], references: [id])
  userId            String      @unique
  companyName       String
  companySize       CompanySize
  companyNeeds      CompanyNeed[]
  companyChallenges String?
}
