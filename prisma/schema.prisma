// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PROFESSIONAL
  BUSINESS
}

enum Secteur {
  TECHNOLOGIE
  AGRO_HALIEUTIQUE
  COMMERCE
  FINANCE
  SANTE
  ÉNERGIE_DURABILITE
  TRANSPORT
  INDUSTRIE
  COMMERCE_DISTRIBUTION
  SERVICES_PROFESSIONNELS
  TOURISME
  MEDIA_DIVERTISSEMENT
  EDUCATION
  AUTRE
}

enum ProfessionalInterest {
  MENTORAT
  RESEAUTAGE
  EMPLOI
  FORMATION
  AUTRE
}

enum CompanyNeed {
  PRESENTATION_MARQUE
  RESEAU_B2B
  TALENTS_QUALIFIES
  TABLEAUX_BORD
  INSIGHTS_SECTORIELS
  OFFRES_EMPLOI
  MENTORS_SECTORIELS
  FREELANCE_HUB
}

enum CompanySize {
  STARTUP
  PME
  GRANDE_ENTREPRISE
}


model User {
  id                   String    @id @default(uuid())
  Prénom               String
  Nom                  String
  Email                String    @unique
  Téléphone_mobile     String    @unique
  role                 UserRole
  city                 String?
  country              String?
  sector               Secteur
  createdAt            DateTime  @default(now())
  emailVerified        Boolean?  @db.Boolean
  besoinPrincipal      ProfessionalInterest?
  professionalDetails   ProfessionalDetail?
  companyDetails       CompanyDetail?
  subscribedToNewsletter Boolean @default(false)
  registeredForTrial    Boolean @default(false)
  registrationDate      DateTime?
  referralSource        String?
  ipAddress             String?
  utmSource             String?
  utmMedium             String?
  utmCampaign           String?
  parrainId             String?
  parrain               User?     @relation("Parrainage", fields: [parrainId], references: [id])
  filleuls              User[]    @relation("Parrainage")
}

model ProfessionalDetail {
  id                     String   @id @default(uuid())
  user                   User     @relation(fields: [userId], references: [id])
  userId                 String   @unique
  professionalInterests  ProfessionalInterest[]
  professionalChallenges String?
  city                   String?
  country                String?
}

model CompanyDetail {
  id                    String      @id @default(uuid())
  user                  User        @relation(fields: [userId], references: [id])
  userId                String      @unique
  companyName           String
  companySize           CompanySize
  companyNeeds          CompanyNeed[]
  companyChallenges     String?
  city                  String?
  country               String?
  companyDescription    String?     
  companyWebsite        String?     
  companyFoundingYear   String?     
  mainNeed              String?     
  otherSector           String?     
}